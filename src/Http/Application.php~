<?php

namespace Http;

use Amqp\RpcClient;
use PhpAmqpLib\Connection\AMQPConnection;
use Silex\Application AS BaseApp;
use Silex\Provider\FormServiceProvider;
use Silex\Provider\TwigServiceProvider;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Service\LoginService;

class Application extends BaseApp{
    public function __construct(array $values = []){
        parent::__construct($values);
        $this->register(new \Silex\Provider\UrlGeneratorServiceProvider());
        $this->loadTwig();
        $this->register(new \Silex\Provider\SecurityServiceProvider(), [
            'security.firewalls' => [
                'game' => [
                    'pattern' => '^/',
                    'anonymous' => true,
                    'form' => ['login_path' => '/login', 'check_path' => '/login/check'],
                    'logout' => ['logout_path' => '/logout'],
                ]
            ],
            'security.access_rules' => [
                ['^/$', 'IS_AUTHENTICATED_ANONYMOUSLY'],
                ['^/login', 'IS_AUTHENTICATED_ANONYMOUSLY'],
                ['^/register', 'IS_AUTHENTICATED_ANONYMOUSLY'],
                ['^/', 'ROLE_USER']
            ],
        ]);

        $this->register(new FormServiceProvider());
        $this['login.service'] = $this->share(function($app){
            return new LoginService($app);
        });
    }
    public function getLoginService(){
        return $this['login.service'];
    }
    public function render($template, $params = []){
        $twig = $this['twig'];
        return $twig->render($template, $params);
    }
    public function other($callback){
        return $this->match('{path}', $callback)->assert('path', '.*');
    }
    public function forward($route_name){
        $urlGenerator = $this['url_generator'];
        $subRequest = Request::create($urlGenerator->generate($route_name));
        return $this->handle($subRequest, HttpKernelInterface::SUB_REQUEST, false);
    }

    /**
     * @param $controllerName
     * @param $actionName
     * @return mixed
     * @throws \Exception
     */
    public function runController($controllerName, $actionName){
        try {
            $controller = new $controllerName($this);
            if(!$controller)
                throw new \BadMethodCallException;
            $methodName = $actionName . 'Action';
            if(!method_exists($controller, $methodName))
                throw new \BadMethodCallException;
        }
        catch(\Exception $e){
            throw $e;
        }

        return $controller->$methodName();
    }

    protected function loadTwig(){
        $app = $this;
        $app->register(new TwigServiceProvider(), [
            'twig.path' => [APP_DIR . '/build/', SRC_DIR . 'resources/views/'],
            'twig.form.templates' => ['fields.html.twig']
        ]);
        $app['asset_path'] = $app->share(function() use ($app){
            return '/';
        });
        $app['twig'] = $app->share($app->extend('twig', function($twig, $app) {
            $twig->addFunction(new \Twig_SimpleFunction('asset', function ($asset) use ($app) {
                return sprintf('%s/%s', rtrim($app['asset_path'], '/'), ltrim($asset, '/'));
            }));

            $twig->addFilter('trans*', new \Twig_Filter_Function(function ($str) {return $str;}));

            return $twig;
        }));
    }
}
